assert from node:assert
import { cecil, closersFor } from '../index.civet'

describe "cecil", =>
  describe "nesting generation calls", =>
    it "can generate in sequence", =>
      assert.equal
        cecil().string (c) =>
          c`inner {` =>
            c`content`

        """
          inner {
            content
          }

        """

      assert.equal
        cecil().string (c) =>
          c`start outer`
          c`end outer`

        """
          start outer
          end outer

        """

    it "can generate while another is generating", =>
      let inner
      outer := cecil().string (c) =>
        c`start outer`
        inner = cecil().string (c) =>
          c`inner {` =>
            c`content`
        c`end outer`

      assert.equal
        inner
        """
          inner {
            content
          }

        """

      assert.equal
        outer
        """
          start outer
          end outer

        """

    it "can generate and include the contents of another", =>
      assert.equal
        cecil().string (c) =>
          c`start outer` =>
            c cecil().string (c2) =>
              c2`inner {` =>
                c2`content`
            c`end outer`

        """
        start outer
          inner {
            content
          }

          end outer

        """

  describe "outputting code", =>
    it "outputs code", =>
      assert.equal
        cecil().string (c) =>
          c`echo template`
          c "echo literal"

        """
        echo template
        echo literal

        """

    it "outputs multiple lines", =>
      assert.equal
        cecil().string (c) =>
          c`line 1`
          c 'line 2'
          c`line 3`

        """
          line 1
          line 2
          line 3

        """

    describe "blocks", =>
      describe "ending pairs", =>
        it "closes opened brackets", =>
          assert.equal
            cecil().string (c) =>
              c`outer {` =>
                c`inner`

              c 'outer2 {', =>
                c`inner2`

            """
              outer {
                inner
              }
              outer2 {
                inner2
              }

            """

        it "doesn't add a closing bracket if closers are found but are all undefined", =>
          assert.equal
            cecil(closers: { '\t': undefined, ' ': undefined, '(': ')' }).string (c) =>
              c`outer template\t \t {`
              c "outer literal\t \t {", =>
            ```
              outer template\t \t {
              outer literal\t \t {

            ```

        it "closes opened brackets even with no children", =>
          assert.equal
            cecil().string (c) =>
              c`outer template {` =>
              c "outer literal {", =>

            """
              outer template {
              }
              outer literal {
              }

            """

        describe "closes opened brackets for template strings only for the last segment", =>
          it 'with a blank string in the value', =>
            assert.equal
              cecil().string (c) =>
                c`(${""}{` =>
              """
                ({
                }

              """

          it 'with a non-blank string in the value', =>
            assert.equal
              cecil().string (c) =>
                c`(${"value"}{` =>
              """
                (value{
                }

              """

          it 'with an open bracket in the value', =>
            assert.equal
              cecil().string (c) =>
                c`${"value("}{` =>
              """
                value({
                }

              """

          it 'with an open bracket in the value in the first position', =>
            assert.equal
              cecil().string (c) =>
                c`${"value("}` =>

              """
                value(

              """

      describe "indentation", =>
        it "indents blocks", =>
          assert.equal
            cecil().string (c) =>
              c`start outer`
              c`inner template {` =>
                c`content`

              c 'inner literal {', =>
                c`content`

              c`end outer`

            """
              start outer
              inner template {
                content
              }
              inner literal {
                content
              }
              end outer

            """

        it "reindents multi-line strings", =>
          assert.equal
            cecil().string (c) =>
              c```
                func() {
                  body
                }
              ```

              c`outer1 {` =>
                c`outer2 {` =>
                  c```
                    funcInner() {
                      bodyInner
                        furtherIndened
                    }
                  ```

            """
              func() {
                body
              }
              outer1 {
                outer2 {
                  funcInner() {
                    bodyInner
                      furtherIndened
                  }
                }
              }

            """

        it "reindents multi-line strings but not blank lines", =>
          assert.equal
            cecil().string (c) =>
              c`outer` =>
                c```
                  func()

                    body
                ```

            """
              outer
                func()

                  body

            """



    xdescribe "reindenting multiline strings", =>
    xdescribe "adding trailing newlines to multiline strings", =>

    describe "deferred code blocks", =>
      it "defers code blocks for evaluation", =>
        assert.equal
          cecil().string (c, { defer }) =>
            items: string[] := []
            defer =>
              c`export { ${items.join(", ")} }`

            for klass of ["A", "B", "C"]
              items.push klass
              c`class ${klass}`


          """
            export { A, B, C }
            class A
            class B
            class C

          """


      it "defers code blocks for evaluation and keep proper indentation level", =>

        assert.equal
          cecil().string (c, { defer }) =>
            items: string[] := []
            c`export {` =>
              defer =>
                c`${items.join(", ")}`

            for klass of ["A", "B", "C"]
              items.push klass
              c`class ${klass}`

          """
            export {
              A, B, C
            }
            class A
            class B
            class C

          """

describe "closersFor", =>
  it "returns the closers for the given string", =>
    assert.equal
      closersFor("abc", b: "B", c: "C")
      "CB"

  it "returns the closers for the given string, and accepts empty string", =>
    assert.equal
      closersFor("abcbb", b: "B", c: "C")
      "BBCB"

  it "returns the first pair that matches the end of the string", =>
    assert.equal
      closersFor("abc", b: "B1", c: "C1", bc: "BC2")
      "C1B1"

  it "matches string of any size", =>
    assert.equal
      closersFor("abcdef", b: "B", bcdef: "BCDEF" )
      "BCDEF"

  it "matches empty string if one of the pairs has empty string as an opener", =>
    assert.equal
      closersFor("abcdef", b: "B", "": "EMPTY", c: "C")
      "EMPTY"

  it "returns undefined when it doesn't match a pair", =>
    assert.equal
      closersFor("abcdef", b: "B", c: "C")
      undefined

  it "returns undefined when the given pairs is empty", =>
    assert.equal
      closersFor("abcdef", {})
      undefined

  it "returns undefined when the string is empty even one of the openers is an empty string", =>
    assert.equal
      closersFor("", "": "empty")
      undefined

  it "returns undefined when no opener matches, even if an opener overlaps with the source string", =>
    assert.equal
      closersFor("a", aa: "AA")
      undefined

  it "returns undefined when the only matched closers are undefined", =>
    assert.equal
      closersFor("a\t ", ' ': undefined, "\t": undefined)
      undefined

  it "skips found closers that are undefined", =>
    assert.equal
      closersFor("a{\t (", ' ': undefined, "\t": undefined, "{": "}", "(": ")")
      ")}"
